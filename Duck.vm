function Duck.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 4
push constant 0
pop this 2
push constant 0
pop this 3
push pointer 0
call Duck.draw 1
pop temp 0
push pointer 0
return
function Duck.draw 2
push argument 0
pop pointer 0
push this 1
push constant 32
call Math.multiply 2
push this 0
push constant 16
call Math.divide 2
add
pop local 1
push constant 16384
push local 1
add
pop local 0
push local 0
push constant 0
add
push constant 1920
call Memory.poke 2
pop temp 0
push local 0
push constant 32
add
push constant 2112
call Memory.poke 2
pop temp 0
push local 0
push constant 64
add
push constant 14656
call Memory.poke 2
pop temp 0
push local 0
push constant 96
add
push constant 18752
call Memory.poke 2
pop temp 0
push local 0
push constant 128
add
push constant 14400
call Memory.poke 2
pop temp 0
push local 0
push constant 160
add
push constant 1088
call Memory.poke 2
pop temp 0
push local 0
push constant 192
add
push constant 1088
call Memory.poke 2
pop temp 0
push local 0
push constant 224
add
push constant 1088
call Memory.poke 2
pop temp 0
push local 0
push constant 256
add
push constant 2081
call Memory.poke 2
pop temp 0
push local 0
push constant 288
add
push constant 4127
call Memory.poke 2
pop temp 0
push local 0
push constant 320
add
push constant 4482
call Memory.poke 2
pop temp 0
push local 0
push constant 352
add
push constant 4292
call Memory.poke 2
pop temp 0
push local 0
push constant 384
add
push constant 2056
call Memory.poke 2
pop temp 0
push local 0
push constant 416
add
push constant 2032
call Memory.poke 2
pop temp 0
push local 0
push constant 448
add
push constant 288
call Memory.poke 2
pop temp 0
push local 0
push constant 480
add
push constant 864
call Memory.poke 2
pop temp 0
push constant 0
return
function Duck.erase 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push this 0
push this 4
add
push this 1
push this 4
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Duck.moveDuck 0
push argument 0
pop pointer 0
push argument 1
push constant 1
eq
push this 3
push constant 1
eq
not
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop this 2
push constant 1
neg
pop this 3
label IF_FALSE0
push argument 1
push constant 2
eq
push this 3
push constant 1
neg
eq
not
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop this 2
push constant 1
pop this 3
label IF_FALSE1
push argument 1
push constant 3
eq
push this 2
push constant 1
eq
not
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
neg
pop this 2
push constant 0
pop this 3
label IF_FALSE2
push argument 1
push constant 4
eq
push this 2
push constant 1
neg
eq
not
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
pop this 2
push constant 0
pop this 3
label IF_FALSE3
push this 0
push this 2
push this 4
call Math.multiply 2
add
pop this 0
push this 1
push this 3
push this 4
call Math.multiply 2
add
pop this 1
push pointer 0
call Duck.erase 1
pop temp 0
push pointer 0
call Duck.draw 1
pop temp 0
push constant 0
return
function Duck.getx 0
push argument 0
pop pointer 0
push this 0
return
function Duck.gety 0
push argument 0
pop pointer 0
push this 1
return
function Duck.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
